{
  "openapi": "3.0.3",
  "info": {
    "title": "Unified API",
    "description": "API endpoints for user authentication, event management, and Google OAuth login",
    "version": "v1"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local Development Server"
    }
  ],
  "paths": {
    "/api/signup": {
      "post": {
        "tags": ["User Routes"],
        "summary": "User signup",
        "description": "Allows users to sign up using email and password",
        "requestBody": {
          "description": "User signup details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignup"
              },
              "example": {
                "name": "John Doe",
                "email": "john.doe@example.com",
                "password": "securepassword",
                "passwordConfirmation": "securepassword"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully signed up user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Signup successful. Account activation required"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., email already exists, weak password, password mismatch)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. Email already exists."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": ["User Routes"],
        "summary": "User login",
        "description": "Allows users to log in using email and password",
        "requestBody": {
          "description": "User login details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "john.doe@example.com",
                "password": "securepassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImJhMzE1MzIyLTU5ZjMtNDZhOS1hZmRmLTQ3NjIyMmQ1ZTljMCIsImlhdCI6MTYyODE3NjY0N30.CZ62KV_Cb8TWW_YiIxy26Im-UjHaTkA4sPbhw2tJvU8"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., invalid credentials)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Invalid credentials."
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/api/logout": {
      "get": {
        "tags": ["User Routes"],
        "summary": "User logout",
        "description": "Allows users to log out and clears the JWT cookie",
        "responses": {
          "200": {
            "description": "Successfully logged out user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Successfully logged out."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/user/profile": {
      "get": {
        "tags": ["User Routes"],
        "summary": "Get user profile",
        "description": "Fetches the authenticated user's profile details",
        "responses": {
          "200": {
            "description": "User profile data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile"
                },
                "example": {
                  "name": "John Doe",
                  "profilePicture": "http://example.com/profile.jpg",
                  "location": "New York, USA",
                  "dateOfBirth": "1990-01-01",
                  "email": "john.doe@example.com",
                  "phoneNumber": "+1 123-456-7890",
                  "interests": "Travel, Photography",
                  "googleAccount": "john.doe@gmail.com"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/user/updateProfile": {
      "patch": {
        "tags": ["User Routes"],
        "summary": "Update user profile",
        "description": "Allows authenticated users to update their profile information",
        "requestBody": {
          "description": "Updated user profile data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdate"
              },
              "example": {
                "name": "John Doe",
                "location": "New York, USA",
                "phone": "+1 123-456-7890",
                "interests": "Travel, Photography",
                "password": "newsecurepassword",
                "profilePicture": "http://example.com/new_profile.jpg"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Profile updated successfully."
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., new password matches the previous password)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. New password matches the previous password."
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/forgot-password": {
      "get": {
        "tags": ["User Routes"],
        "summary": "Forgot Password",
        "description": "Renders the \"Forgot Password\" form"
      },
      "post": {
        "tags": ["User Routes"],
        "summary": "Handle \"Forgot Password\" form submission",
        "description": "Sends a password reset email to the user's email address",
        "requestBody": {
          "description": "User's email address",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserForgotPassword"
              },
              "example": {
                "email": "john.doe@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Password reset email sent successfully."
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., user not found, password reset link expired)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/reset-password/{token}": {
      "get": {
        "tags": ["User Routes"],
        "summary": "Password Reset",
        "description": "Renders the \"Password Reset\" form",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Password reset token received via email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "post": {
        "tags": ["User Routes"],
        "summary": "Handle \"Password Reset\" form submission",
        "description": "Resets the user's password based on the password reset token",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "Password reset token received via email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New password and password confirmation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserResetPassword"
              },
              "example": {
                "password": "newsecurepassword",
                "confirmPassword": "newsecurepassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Password reset successful."
                }
              }
            }
          },
          "400": {
            "description": "Bad request (e.g., password and confirmation do not match)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. Password and confirmation do not match."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/google": {
      "get": {
        "tags": ["User Routes"],
        "summary": "Google OAuth login",
        "description": "Initiates the Google OAuth process for login",
        "responses": {
          "302": {
            "description": "Redirects to Google login page for authentication"
          }
        }
      }
    },
    "/api/auth/google/callback": {
      "get": {
        "tags": ["User Routes"],
        "summary": "Google OAuth callback",
        "description": "Handles the callback after successful Google OAuth authentication",
        "responses": {
          "302": {
            "description": "Redirects back to the application after successful authentication"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/api/donations": {
      "get": {
        "tags": ["Donation Routes"],
        "summary": "Make donation",
        "description": "Renders the \"Make Donation\" form"
      },
      "post": {
        "tags": ["Donation Routes"],
        "summary": "Make donation",
        "description": "Allows users to donate to events",
        "requestBody": {
          "description": "Donation details",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakeDonation"
              },
              "example": {
                "eventId": "event-id",
                "amount": 450
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Donation made successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Donation made successfully."
                }
              }
            }
          },
          "404": {
            "description": "Bad request (e.g., user not found, event not found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. User or event not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/api/donations/{userId}": {
      "get": {
        "tags": ["Donation Routes"],
        "summary": "Get user donations",
        "description": "Fetches the donations the user has made",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "the desired user id whose donations we seek",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User donations data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDonations"
                },
                "example": {
                  "eventId": "event-id",
                  "amount": 450
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/api/donations/{eventId}": {
      "get": {
        "tags": ["Donation Routes"],
        "summary": "Get event donations",
        "description": "Fetches the donations made to the event",
        "parameters": [
          {
            "in": "path",
            "name": "eventId",
            "description": "the desired event id whose donations we seek",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event donations data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDonations"
                },
                "example": {
                  "userId": "user-id",
                  "amount": 450
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/blogPosts/new": {
      "get": {
        "tags": ["Blog Routes"],
        "summary": "Create blog post",
        "description": "Renders the \"Create Blog Post\" form"
      },
      "post": {
        "tags": ["Blog Routes"],
        "summary": "Create blog post",
        "description": "Allows admin users to create blog posts",
        "requestBody": {
          "description": "Blog post fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlogPost"
              },
              "example": {
                "title": "An introduction to Fluxity",
                "bannerImage": "/Fluxity/BlogPosts/Img/IntroBanner.jpg",
                "category": "Article",
                "shortDescription": "This is an introductory article to Fluxity's work",
                "bodyText": "Fluxity is a platform to host and join non-profit events. It was created by ..."
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Blog post created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Blog post created successfully."
                }
              }
            }
          },
          "401": {
            "description": "User not authorized to create blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not authorized to create blog posts"
                }
              }
            }
          },
          "404": {
            "description": "Bad request (e.g., user not found, category not found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Bad request. User or category not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error."
                }
              }
            }
          }
        }
      }
    },
    "/blogPosts": {
      "get": {
        "tags": ["Blog Routes"],
        "summary": "Get all blog posts",
        "description": "Fetches the blog posts",
        "responses": {
          "200": {
            "description": "Fetch all blog posts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllBlogPosts"
                },
                "example": {
                  "blogPostId": 124563
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/blogPosts/{blogPostId}": {
      "get": {
        "tags": ["Blog Routes"],
        "summary": "Get the blog post",
        "description": "Fetches the blog post",
        "parameters": [
          {
            "in": "path",
            "name": "blogPostId",
            "description": "the desired blog post id to be shown",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlogPost"
                },
                "example": {
                  "title": "An introduction to Fluxity",
                  "bannerImage": "/Fluxity/BlogPosts/Img/IntroBanner.jpg",
                  "author": "Omid Kayhani",
                  "date": "2023-08-04T10:32:10.292Z",
                  "category": "Article",
                  "shortDescription": "This is an introductory article to Fluxity's work",
                  "bodyText": "Fluxity is a platform to host and join non-profit events. It was created by ..."
                }
              }
            }
          },
          "404": {
            "description": "Blog post not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Blog post not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/blogPosts/{blogPostId}/update": {
      "get": {
        "tags": ["Blog Routes"],
        "summary": "Get the blog post fields to update",
        "description": "Fetches the blog post update form",
        "parameters": [
          {
            "in": "path",
            "name": "blogPostId",
            "description": "the desired blog post id to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "patch": {
        "tags": ["Blog Routes"],
        "summary": "Update the blog post",
        "description": "Allows authenticated users to update their blog posts",
        "parameters": [
          {
            "in": "path",
            "name": "blogPostId",
            "description": "the desired blog post id to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update the blog post",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlogPost"
              },
              "example": {
                "title": "An introduction to Fluxity",
                "bannerImage": "/Fluxity/BlogPosts/Img/IntroBanner.jpg",
                "category": "Article",
                "shortDescription": "This is an introductory article to Fluxity's work",
                "bodyText": "Fluxity is a platform to host and join non-profit events. It was created by ..."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Blog post updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Blog post updated successfully."
                }
              }
            }
          },
          "401": {
            "description": "User is not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not authorized to update the blog post."
                }
              }
            }
          },
          "404": {
            "description": "User or blog not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User or blog not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/blogPosts/{blogPostId}/delete": {
      "get": {
        "tags": ["Blog Routes"],
        "summary": "Blog post deletion",
        "description": "Allows admins to delete blog posts",
        "parameters": [
          {
            "in": "path",
            "name": "blogPostId",
            "description": "the desired blog post id to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Blog post deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Blog post deleted successfully."
                }
              }
            }
          },
          "401": {
            "description": "User is not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User not authorized to deleted the blog post."
                }
              }
            }
          },
          "404": {
            "description": "User or blog not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "User or blog not found."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Internal server error occurred."
                }
              }
            }
          }
        }
      }
    },
    "/events/user/{userId}": {
      "get": {
        "tags": ["Event Routes"],
        "summary": "Get events for user",
        "description": "Retrieves events that a specific user has joined.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": { "type": "string" },
          "description": "User ID"
        }],
        "responses": {
          "200": {
            "description": "Events for user retrieved successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventList" }
              }
            }
          },
          "400": {
            "description": "Bad request or user not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/search": {
      "get": {
        "tags": ["Event Routes"],
        "summary": "Search events",
        "description": "Searches for events based on criteria.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "query",
          "name": "keyword",
          "required": true,
          "schema": { "type": "string" },
          "description": "Keyword for event search"
        }],
        "responses": {
          "200": {
            "description": "Events search results retrieved successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventList" }
              }
            }
          },
          "400": {
            "description": "Bad request or no events found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/join": {
      "post": {
        "tags": ["Event Routes"],
        "summary": "Join an event",
        "description": "Allows a user to join an existing event.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "eventId",
          "required": true,
          "schema": { "type": "string" },
          "description": "Event ID"
        }],
        "responses": {
          "200": {
            "description": "User successfully joined the event.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request, event not found, or user already joined.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/createEvent": {
      "post": {
        "tags": ["Event Routes"],
        "summary": "Create an event",
        "description": "Creates a new event.",
        "security": [{ "BearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventCreate" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event created successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request or user not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/update": {
      "patch": {
        "tags": ["Event Routes"],
        "summary": "Update an event",
        "description": "Updates an existing event.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "eventId",
          "required": true,
          "schema": { "type": "string" },
          "description": "Event ID"
        }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EventUpdate" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event updated successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request, event not found, or event capacity exceeded.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}/delete": {
      "delete": {
        "tags": ["Event Routes"],
        "summary": "Delete an event",
        "description": "Deletes an existing event.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "eventId",
          "required": true,
          "schema": { "type": "string" },
          "description": "Event ID"
        }],
        "responses": {
          "200": {
            "description": "Event deleted successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request or event not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": ["Event Routes"],
        "summary": "Get event details",
        "description": "Retrieves details of a specific event.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "eventId",
          "required": true,
          "schema": { "type": "string" },
          "description": "Event ID"
        }],
        "responses": {
          "200": {
            "description": "Event details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventDetails" }
              }
            }
          },
          "400": {
            "description": "Bad request or event not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/eventse/{eventId}/leaveEvent": {
      "post": {
        "tags": ["Event Routes"],
        "summary": "Leave an event",
        "description": "Leaves an event.",
        "security": [{ "BearerAuth": [] }],
        "parameters": [{
          "in": "path",
          "name": "eventId",
          "required": true,
          "schema": { "type": "string" },
          "description": "Event ID"
        }],
        "responses": {
          "200": {
            "description": "User left the event successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request or user not participating in the event.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": ["Event Routes"],
        "summary": "Get all events",
        "description": "Retrieves all available events.",
        "security": [{ "BearerAuth": [] }],
        "responses": {
          "200": {
            "description": "All events retrieved successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EventList" }
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserSignup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          },
          "passwordConfirmation": {
            "type": "string"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "UserForgotPassword": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "UserResetPassword": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        }
      },
      "UserProfile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string",
            "format": "url"
          },
          "location": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "phoneNumber": {
            "type": "string"
          },
          "interests": {
            "type": "string"
          },
          "googleAccount": {
            "type": "string"
          }
        }
      },
      "UserProfileUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "interests": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "profilePicture": {
            "type": "string",
            "format": "url"
          }
        }
      },
      "MakeDonation": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "number"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "UserDonations": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "number"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "EventDonations": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "string",
            "format": "number"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "CreateBlogPost": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "bannerImage": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "bodyText": {
            "type": "string"
          }
        }
      },
      "AllBlogPosts": {
        "type": "object",
        "properties": {
          "blogPostId": {
            "type": "string",
            "format": "number"
          }
        }
      },
      "BlogPost": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "bannerImage": {
            "type": "string"
          },
          "author": {
            "type": "string"
          },
          "lastModified": {
            "type": "string",
            "format": "date"
          },
          "category": {
            "type": "string"
          },
          "shortDescription": {
            "type": "string"
          },
          "bodyText": {
            "type": "string"
          }
        }
      },
      "EventCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Birthday Party"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T18:00:00Z"
          },
          "location": {
            "type": "string",
            "example": "123 Main St, City"
          },
          "capacity": {
            "type": "integer",
            "example": 50
          }
        }
      },
      "EventUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated Birthday Party"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T19:30:00Z"
          },
          "location": {
            "type": "string",
            "example": "456 Park Ave, Town"
          },
          "capacity": {
            "type": "integer",
            "example": 60
          }
        }
      },
      "EventDetails": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "example": "event123"
          },
          "name": {
            "type": "string",
            "example": "Birthday Party"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "example": "2023-08-15T18:00:00Z"
          },
          "location": {
            "type": "string",
            "example": "123 Main St, City"
          },
          "capacity": {
            "type": "integer",
            "example": 50
          }
        }
      },
      "EventList": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EventDetails" }
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      }
    }
  }
}
